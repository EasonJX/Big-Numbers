#include "stdafx.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  static char     dbname[20];
  static short    dbnameindi;
  static char     username[30];
  static char     password[30];
  static char     firstcolumn[30];
  static short    s;
  static unsigned short s1;
  static short    s2;
  static float    f;
  static double   d;
  static int      i;
  static unsigned int i1;
  static int      i2;
  static long     l;
  static unsigned long l1;
  static long     l2;
  static char     varch1[20];
  static char     longss[27];
  static varchar  myvarchar(512);
  static char     nullcolumn1[7];
  static double   dd;
  static int      ii;
  static int      month;
  static int      year;
  static Date     dddd1;
  static Date     dddd2;
EXEC SQL END   DECLARE SECTION;

static void xchecksql(TCHAR *file,int line) {
  if(sqlca.sqlcode != SQL_OK) {
    _tprintf(_T("sql failure in %s line %d\n"),file,line);
    sqlca.dump();
    exit(-1);
  }
}

#define checkSql() xchecksql(_T(__FILE__),__LINE__)

/*
static void selectff() {

  exec sql
    select t || (select t from ff union select (substring(t,1,2) || t) from ff)
      into :firstcolumn
    from ff
    where 
      k = (select k + 1 from ff intersect select k from ff)
    and :l1 is null
  end-exec

  checkSql();

}
*/

static void selectMyTable() {
  exec sql
    select firstcolumn
      into :firstcolumn
    from mytable
    where :l1 is null
  end-exec

  checkSql();

}

static void insertMyTable() {
  exec sql
   insert into mytable (
      FIRSTCOLUMN
     ,S
     ,S1
     ,s2
     ,I
     ,I1
     ,I2
     ,L
     ,L1
     ,L2
     ,F
     ,D
     ,longss
     ,varch1
     )
   values (
     :firstcolumn
    ,:s
    ,:s1
    ,:s2
    ,:i
    ,:i1
    ,:i2
    ,:l
    ,:l1
    ,:l2
    ,:f
    ,:d
    ,:longss
    ,:myvarchar
    )
  end-exec

  checkSql();
}


static void insertTabDate() {
  exec sql
	INSERT INTO mytable (
	   firstcolumn
	  ,c1
	  ,c2
	  ,s 
	  ,i 
	  ,i1
	  ,i2
	  ,l 
	  ,l1
	  ,l2
	  ,f 
	  ,d 
	  ,varch1
	  ,varch2
	  ) values (
	  "1.8"
	  ,7
	  ,1
	  ,65
	  ,15 ** 2
	  ,58
	  ,59
	  ,34976
	  ,(12 + 5) % 17
	  ,234
	  ,2.45
	  ,2.567
	  ,"2"
	  ,substring("hallo" from 1 for 4 ) || "varch2" || "con"
	  )
	for stable access
  end-exec

/*
  exec sql
   insert into tabdate (
      ch
     ,d
     )
   values ( 
     :ii - 120
    ,#28.01-03# - 2
    )
  end-exec
*/
  checkSql();
}

/*
  exec sql
    select a.firstcolumn into :myvarchar :s2 from lilletable a
  end-exec
*/

static void insertLilleTable() {
  EXEC SQL
    insert into lilletable (
      firstcolumn
     ,nullcolumn1
     ,dd
     ,ii
     ,d
    )
    values (
     :myvarchar
    ,"jesper"
    ,:dd
    ,:ii
    ,:d
    )    
  END-EXEC

  checkSql();
}

static void selectLilleTable() {
  EXEC SQL
    select 
      " ",
      a.firstcolumn,
      b.firstcolumn,
      date(32,12,2004) + count(a.firstcolumn)
    into
      :firstcolumn,
      :firstcolumn,
      :firstcolumn,
      :dddd2 :s
    from lilletable a,
         lilletable b
    where a.firstcolumn <= "2" and currentdate < #29-2-00#
    group by a.firstcolumn, b.firstcolumn
    having count(distinct a.firstcolumn) = 2
    order by a.firstcolumn
  END-EXEC
}

static void dropMyTable() {
  exec sql
    drop table mytable
  end-exec

  checkSql();
}

static char *randstr(char *str, int len) {
  for(int i = 0; i < len; i++)
    str[i] = 'a' + rand() % ('z'-'a'+1);
  str[i] = '\0';
  return str;
}

static void insertRowsIntoMyTable() {
  for(i = 0; i < 1000; i++) {
    randstr(firstcolumn,sizeof(firstcolumn)-1);
    s  = i;
    s1 = i;
    s2 = i;
    i1 = i;
    i2 = i;
    l  = i;
    l1 = i;
    l2 = i;
    f  = (float)i;
    d  = i;
    sprintf(varch1,"varch1-%d",i);
    sprintf(longss,"longs%-03d",i%11);
    printf("now inserting (i=%d)\n",i);
    char lstr[1000];
    sprintf(lstr,"%s","Jesper");
    myvarchar = lstr;
    insertMyTable();
  }
}

static void createMyTable() {
  exec sql
    create table mytable (  
      firstcolumn char(30)  not null,
      c1  unsigned char not null default 2,
      c2  unsigned char not null default 255,
      cs1 unsigned char(1)  not null default "1",
      cs2 signed   char(1)  not null default "æ",
      s   short         not null,
      s1  unsigned short ,
      s2  signed   short not null default -327,
      i   int           not null,
      i1  unsigned int  not null,
      i2  signed   int  not null,
      l   long          not null,
      l1  unsigned long not null,
      l2  signed   long not null,
      f   float         not null,
      d   double        not null,
      longss            char(21) not null default "12345678901234567890",
      varch1            varchar(254) not null ,
      varch2            varchar(222) default "fisk",
      primary key (firstcolumn, longss, c1, c2, s2)
    )
  end-exec

  checkSql();
}

static void createLilleTable() {
  exec sql
    drop table lilletable
  end-exec

  checkSql();

  exec sql
    create table lilletable (  
      firstcolumn varchar(240) not null,
      nullcolumn1 char(7),
      dd          double,
      ii          int,
      d           int not null,
      primary key (firstcolumn, d)
    )
  end-exec

  checkSql();

  exec sql
    create index ddd on lilletable (ii,dd,firstcolumn)
  end-exec

  checkSql();

  exec sql
    create index fff on lilletable (dd,ii,firstcolumn)
  end-exec

  checkSql();
}

static void insertRowsIntoLilleTable() {
  for(i = 0; i < 5; i++) {
    char tmp[100];
    randstr(tmp,sizeof(tmp)-1);
//    sprintf(tmp,"varchar100 = %d",i);
    myvarchar = varchar(100,tmp);
    dd = rand() % 100;
    ii = rand() % 3;
    d = i;
    printf("now inserting (i=%d)\n",i);
    insertLilleTable();
  }
}

static void insertRowsIntoTabdate() {
  for(i = 0; i < 200; i++) {
    ii = i;
    dddd2 -= 1;
    dd = i + 1;
    month = 12;
    year = 1994;
    insertTabDate();
  }
}

static void dbConnect() {
  EXEC SQL CONNECT TO :dbname user :username using :password;

  checkSql();
}

static void dbDisconnect() {
  EXEC SQL CONNECT RESET;
}

typedef enum {
  CMD_DROP,
  CMD_CREATE,
  CMD_INSERT,
  CMD_NONE
} Command;

static void usage() {
  fprintf(stderr,"Usage:test [-dcin]\n");
  exit(-1);
}

int main(int argc, char **argv) {
  Command cmd = CMD_INSERT;
  char *cp;
  time_t tt;
  time(&tt);
  srand(tt);
  for(argv++;*argv && *(cp = *argv) == '-';argv++)    
    for(cp++;*cp;cp++) {
      switch(*cp) {
      case 'd':
        cmd = CMD_DROP; continue;
      case 'c':
        cmd = CMD_CREATE; continue;
      case 'i':
        cmd = CMD_INSERT; continue;
      case 'n':
        cmd = CMD_NONE; continue;
      default:usage();
      }
      break;
    }

  strcpy(dbname   , "fisk");
  strcpy(username , "ADM" );
  strcpy(password , "ADM" );

  dbConnect();
  switch(cmd) {
    case CMD_DROP:
      dropMyTable(); 
      break;
    case CMD_CREATE:
      createLilleTable();
      createMyTable(); 
      break;
    case CMD_INSERT:
//      insertRowsIntoLilleTable(); 
    insertRowsIntoMyTable();
//      insertRowsIntoTabdate();
      break;
  }
  if(sqlca.sqlcode != SQL_OK)
    sqlca.dump();

  return 0;
}
