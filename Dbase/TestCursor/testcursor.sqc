#include "stdafx.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  static char	          dbname[20];
  static short	        dbnameindi;
  static char	          username[30];
  static char	          password[30];
  static char	          firstcolumn[30];
  static short	        s;
  static unsigned short s1;
  static short	        s2;
  static float	        f;
  static double         d;
  static int	          i;
  static unsigned int   i1;
  static int	          i2;
  static long	          l;
  static unsigned long  l1;
  static long	          l2;
  static char	          varch1[20];
  static char	          longss[27];
  static varchar        myvarchar(512);
  static char	          nullcolumn1[7];
  static double         dd;
  static int	          ii;
  static int            mm;
  static Date           dddd1;
  static Date           dddd2;
EXEC SQL END DECLARE SECTION;

static void xchecksql(TCHAR *file,int line) {
  if(sqlca.sqlcode != SQL_OK && sqlca.sqlcode != SQL_NOT_FOUND) {
	  _tprintf(_T("sql failure in %s line %d\n"), file, line);
	  sqlca.dump();
	  exit(-1);
  }
}

#define checkSql() xchecksql(_T(__FILE__),__LINE__)

static void openCursor() {
  dd = 12;
  EXEC SQL
    DECLARE curs cursor for
	  select 
	    cast(firstcolumn as int),
		firstcolumn
	  from lilletable

	  where "12" <> :myvarchar
  END-EXEC

  EXEC SQL
    OPEN curs
  END-EXEC
}

static bool fetchcursor() {
  EXEC SQL
    FETCH curs
	into
	  :dd :s,
	  :firstcolumn

  END-EXEC
  checkSql();
  return sqlca.sqlcode == 0;
}

static void closeCursor() {
  EXEC SQL
    CLOSE curs
  END-EXEC
}

static void dbConnect() {
  EXEC SQL CONNECT TO :dbname user :username using :password;

  checkSql();
}

static void dbDisconnect() {
  EXEC SQL CONNECT RESET ;
}

int main(int argc, char **argv) {
  strcpy(dbname  , "fisk");
  strcpy(username, "ADM" );
  strcpy(password, "ADM" );

  dbConnect();
  checkSql();

  openCursor();
  checkSql();

  while(fetchcursor()) {
    _tprintf(_T("<%s>, <%d>\n"), firstcolumn, ii);
  }

  closeCursor();
  checkSql();

  dbDisconnect();
  checkSql();

  return 0;
}
