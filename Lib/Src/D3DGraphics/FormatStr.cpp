#include "pch.h"
#include <D3DGraphics/D3ToString.h>
#include "D3NameLookupTemplate.h"

#if defined(caseStr)
#undef  caseStr
#endif
#if defined(NV)
#undef NV
#endif
#define caseStr(v) case D3DFMT_##v: return _T(#v);
#define NV(v)      D3DFMT_##v, _T(#v)

String formatToString(D3DFORMAT f) {
  switch(f) {
  caseStr(UNKNOWN            )
  caseStr(R8G8B8             )
  caseStr(A8R8G8B8           )
  caseStr(X8R8G8B8           )
  caseStr(R5G6B5             )
  caseStr(X1R5G5B5           )
  caseStr(A1R5G5B5           )
  caseStr(A4R4G4B4           )
  caseStr(R3G3B2             )
  caseStr(A8                 )
  caseStr(A8R3G3B2           )
  caseStr(X4R4G4B4           )
  caseStr(A2B10G10R10        )
  caseStr(A8B8G8R8           )
  caseStr(X8B8G8R8           )
  caseStr(G16R16             )
  caseStr(A2R10G10B10        )
  caseStr(A16B16G16R16       )
  caseStr(A8P8               )
  caseStr(P8                 )
  caseStr(L8                 )
  caseStr(A8L8               )
  caseStr(A4L4               )
  caseStr(V8U8               )
  caseStr(L6V5U5             )
  caseStr(X8L8V8U8           )
  caseStr(Q8W8V8U8           )
  caseStr(V16U16             )
  caseStr(A2W10V10U10        )
  caseStr(UYVY               )
  caseStr(R8G8_B8G8          )
  caseStr(YUY2               )
  caseStr(G8R8_G8B8          )
  caseStr(DXT1               )
  caseStr(DXT2               )
  caseStr(DXT3               )
  caseStr(DXT4               )
  caseStr(DXT5               )
  caseStr(D16_LOCKABLE       )
  caseStr(D32                )
  caseStr(D15S1              )
  caseStr(D24S8              )
  caseStr(D24X8              )
  caseStr(D24X4S4            )
  caseStr(D16                )
  caseStr(D32F_LOCKABLE      )
  caseStr(D24FS8             )
  caseStr(D32_LOCKABLE       )
  caseStr(S8_LOCKABLE        )
  caseStr(L16                )
  caseStr(VERTEXDATA         )
  caseStr(INDEX16            )
  caseStr(INDEX32            )
  caseStr(Q16W16V16U16       )
  caseStr(MULTI2_ARGB8       )
  caseStr(R16F               )
  caseStr(G16R16F            )
  caseStr(A16B16G16R16F      )
  caseStr(R32F               )
  caseStr(G32R32F            )
  caseStr(A32B32G32R32F      )
  caseStr(CxV8U8             )
  caseStr(A1                 )
  caseStr(A2B10G10R10_XR_BIAS)
  caseStr(BINARYBUFFER       )
  default: throwInvalidArgumentException(__TFUNCTION__,_T("Unknown format:%d"), f);
  }
  return EMPTYSTRING;
}

static const NameValue<D3DFORMAT> formatNames[] = {
  NV(R8G8B8             )
 ,NV(A8R8G8B8           )
 ,NV(X8R8G8B8           )
 ,NV(R5G6B5             )
 ,NV(X1R5G5B5           )
 ,NV(A1R5G5B5           )
 ,NV(A4R4G4B4           )
 ,NV(R3G3B2             )
 ,NV(A8                 )
 ,NV(A8R3G3B2           )
 ,NV(X4R4G4B4           )
 ,NV(A2B10G10R10        )
 ,NV(A8B8G8R8           )
 ,NV(X8B8G8R8           )
 ,NV(G16R16             )
 ,NV(A2R10G10B10        )
 ,NV(A16B16G16R16       )
 ,NV(A8P8               )
 ,NV(P8                 )
 ,NV(L8                 )
 ,NV(A8L8               )
 ,NV(A4L4               )
 ,NV(V8U8               )
 ,NV(L6V5U5             )
 ,NV(X8L8V8U8           )
 ,NV(Q8W8V8U8           )
 ,NV(V16U16             )
 ,NV(A2W10V10U10        )
 ,NV(UYVY               )
 ,NV(R8G8_B8G8          )
 ,NV(YUY2               )
 ,NV(G8R8_G8B8          )
 ,NV(DXT1               )
 ,NV(DXT2               )
 ,NV(DXT3               )
 ,NV(DXT4               )
 ,NV(DXT5               )
 ,NV(D16_LOCKABLE       )
 ,NV(D32                )
 ,NV(D15S1              )
 ,NV(D24S8              )
 ,NV(D24X8              )
 ,NV(D24X4S4            )
 ,NV(D16                )
 ,NV(D32F_LOCKABLE      )
 ,NV(D24FS8             )
 ,NV(D32_LOCKABLE       )
 ,NV(S8_LOCKABLE        )
 ,NV(L16                )
 ,NV(VERTEXDATA         )
 ,NV(INDEX16            )
 ,NV(INDEX32            )
 ,NV(Q16W16V16U16       )
 ,NV(MULTI2_ARGB8       )
 ,NV(R16F               )
 ,NV(G16R16F            )
 ,NV(A16B16G16R16F      )
 ,NV(R32F               )
 ,NV(G32R32F            )
 ,NV(A32B32G32R32F      )
 ,NV(CxV8U8             )
 ,NV(A1                 )
 ,NV(A2B10G10R10_XR_BIAS)
 ,NV(BINARYBUFFER       )
};

DefineNameLookupClass(D3DFORMAT, formatNames,Format);

D3DFORMAT formatFromString(const String &str) {
  return FormatLookupTable::getInstance().lookupName(str);
}
