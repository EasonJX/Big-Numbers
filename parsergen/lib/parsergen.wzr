%{

  /* This part goes to $CLASSNAMEparser.h */

#pragma once

#include <LRparser.h>
#include "$CLASSNAMEsymbol.h"
#include "$CLASSNAMElex.h"

#ifndef YYSTYPE
#define YYSTYPE int
#endif

class $CLASSNAMEparser : public LRparser {
private:
  static const ParserTables *$CLASSNAMETables;

public:
  $CLASSNAMEparser(scanner *lex=NULL) : LRparser(*$CLASSNAMEtables,lex) { }
private:
  YYSTYPE m_leftSide,*m_stacktop,m_userstack[256];
  void userStackInit()                           { m_stacktop = m_userstack;               }
  YYSTYPE stacktop(int fromtop)                  { return m_stacktop[-fromtop];            }
  void userStackShiftSymbol(unsigned int symbol) { m_stacktop++;                           } // push 1 element (garbage) on userstack
  void userStackPopSymbols( unsigned int count ) { m_stacktop      -= count;               } // pop count symbols from userstack
  void userStackShiftLeftSide()                  { *(++m_stacktop) = m_leftSide;           } // push($$) on userstack
  void defaultreduce(       unsigned int prod  ) { m_leftSide      = *m_stacktop;          } // $$ = $1
  int  reduceaction(        unsigned int prod  );
};

%}
%term /* TODO:Enter terminalsymbols here
%{
  /* This part goes to the first part of $CLASSNAMEaction.cpp */

#include "stdafx.h"
#include "$CLASSNAMEparser.h"
%}
%%

start : ;  /* TODO:Enter productions here */

%%

  /* This part goes to the last part of $CLASSNAMEaction.cpp */
